{"version":3,"file":"read-time-estimate.min.js","sources":["../src/constants/index.js","../src/utils/image-read-time.js","../src/utils/words-read-time.js","../src/utils/humanize-time.js","../src/index.js","../src/utils/strip-tags.js","../src/utils/strip-whitespace.js"],"sourcesContent":["/* https://help.medium.com/hc/en-us/articles/214991667-Read-time */\n/* https://blog.medium.com/read-time-and-you-bc2048ab620c */\n\nconst WORDS_PER_MIN = 275; // wpm\n\nconst IMAGE_READ_TIME = 12; // in seconds\n\nconst CHINESE_KOREAN_READ_TIME = 500; // cpm\n\nconst IMAGE_TAGS = ['img', 'Image'];\n\nexport {\n  WORDS_PER_MIN,\n  IMAGE_READ_TIME,\n  CHINESE_KOREAN_READ_TIME,\n  IMAGE_TAGS,\n};\n","/**\n *  String#imageReadTime() -> { time, count }\n *\n *  Get Image Read Time from a string.\n *\n * */\nimport { IMAGE_READ_TIME, IMAGE_TAGS } from '../constants';\n\nfunction imageCount(imageTags, string) {\n  const combinedImageTags = imageTags.join('|');\n  const pattern = `<(${combinedImageTags})([\\\\w\\\\W]+?)[\\\\/]?>`;\n  const reg = new RegExp(pattern, 'g');\n  return (string.match(reg) || []).length;\n}\n\nfunction imageReadTime(customImageTime = IMAGE_READ_TIME, tags = IMAGE_TAGS, string) {\n  let seconds = 0;\n  const count = imageCount(tags, string);\n\n  if (count > 10) {\n    seconds = ((count / 2) * (customImageTime + 3)) + (count - 10) * 3; // n/2(a+b) + 3 sec/image\n  } else {\n    seconds = (count / 2) * (2 * customImageTime + (1 - count)); // n/2[2a+(n-1)d]\n  }\n  return {\n    time: seconds / 60,\n    count,\n  };\n}\n\nexport { imageCount };\nexport default imageReadTime;\n","/**\n *  String#wordsReadTime() -> { characterTime, otherLanguageTime, wordTime, wordCount }\n *\n *  Get Words count from a string.\n *\n * */\nimport { WORDS_PER_MIN, CHINESE_KOREAN_READ_TIME } from '../constants';\n\nfunction wordsCount(string) {\n  const pattern = '\\\\w+';\n  const reg = new RegExp(pattern, 'g');\n  return (string.match(reg) || []).length;\n}\n\n// Chinese / Japanese / Korean\nfunction otherLanguageReadTime(string) {\n  const pattern = '[\\u3040-\\u30ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff\\uff66-\\uff9f\\u3131-\\u314E\\u314F-\\u3163\\uAC00-\\uD7A3]';\n  const reg = new RegExp(pattern, 'g');\n  const count = (string.match(reg) || []).length;\n  const time = count / CHINESE_KOREAN_READ_TIME;\n  const formattedString = string.replace(reg, '');\n  return {\n    count,\n    time,\n    formattedString,\n  };\n}\n\nfunction wordsReadTime(string, wordsPerMin = WORDS_PER_MIN) {\n  const {\n    count: characterCount,\n    time: otherLanguageTime,\n    formattedString,\n  } = otherLanguageReadTime(string);\n  const wordCount = wordsCount(formattedString);\n  const wordTime = wordCount / wordsPerMin;\n  return {\n    characterCount,\n    otherLanguageTime,\n    wordTime,\n    wordCount,\n  };\n}\n\nexport { wordsCount, otherLanguageReadTime };\nexport default wordsReadTime;\n","/**\n *  String#humanizeTime() -> String\n *\n *  Convert time(in minutes) to a humanized string.\n *\n * */\n\nfunction humanizeTime(time, language) {\n  language = (typeof language !== 'undefined') ?  language : 'ko';\n  if (time < 0.5) {\n    return language === 'ko' ? '1분 미만' : 'Less than a minute';\n  } if (time >= 0.5 && time < 1.5) {\n    return language === 'ko' ? '1분' : '1 minute';\n  }\n  return language === 'ko' ? `${Math.ceil(time)} 분` : `${Math.ceil(time)} minutes`;\n}\n\n\nexport default humanizeTime;\n","import imageReadTime from './utils/image-read-time';\nimport wordsReadTime from './utils/words-read-time';\nimport stripTags from './utils/strip-tags';\nimport stripWhitespace from './utils/strip-whitespace';\nimport humanizeTime from './utils/humanize-time';\n\n\nfunction readTime(\n  string,\n  customWordTime,\n  customImageTime,\n  chineseKoreanReadTime,\n  imageTags,\n  language\n) {\n  const { time: imageTime, count: imageCount } = imageReadTime(customImageTime, imageTags, string);\n  const strippedString = stripTags(stripWhitespace(string));\n  const {\n    characterCount,\n    otherLanguageTime,\n    wordTime,\n    wordCount,\n  } = wordsReadTime(strippedString, customWordTime);\n  return {\n    humanizedDuration: humanizeTime(imageTime + otherLanguageTime, language),\n    duration: imageTime + wordTime,\n    totalWords: wordCount,\n    wordTime,\n    totalImages: imageCount,\n    imageTime,\n    otherLanguageTimeCharacters: characterCount,\n    otherLanguageTime,\n  };\n}\n\nexport default readTime;\n","/**\n *  String#stripTags() -> String\n *\n *  Strip HTML tags string.\n *\n * */\n\nfunction stripTags(string) {\n  const pattern = '<\\\\w+(\\\\s+(\"[^\"]*\"|\\\\\\'[^\\\\\\']*\\'|[^>])+)?>|<\\\\/\\\\w+>';\n  const reg = new RegExp(pattern, 'gi');\n  return string.replace(reg, '');\n}\n\nexport default stripTags;\n","/**\n *  String#stripWhitespace() -> String\n *\n *  Strip HTML tags string.\n *\n * */\n\nfunction stripWhitespace(string) {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n}\n\nexport default stripWhitespace;\n"],"names":["WORDS_PER_MIN","IMAGE_READ_TIME","CHINESE_KOREAN_READ_TIME","IMAGE_TAGS","imageReadTime","customImageTime","tags","string","seconds","count","imageTags","combinedImageTags","join","reg","RegExp","match","length","imageCount","time","wordsReadTime","wordsPerMin","characterCount","otherLanguageTime","formattedString","replace","otherLanguageReadTime","wordCount","wordsCount","wordTime","humanizeTime","language","Math","ceil","customWordTime","chineseKoreanReadTime","imageTime","strippedString","stripTags","stripWhitespace","humanizedDuration","duration","totalWords","totalImages","otherLanguageTimeCharacters"],"mappings":"iMAGA,MAAMA,EAAgB,IAEhBC,EAAkB,GAElBC,EAA2B,IAE3BC,EAAa,CAAC,MAAO,SCM3B,SAASC,EAAcC,EAAkBJ,EAAiBK,EAAOH,EAAYI,OACvEC,EAAU,QACRC,EATR,SAAoBC,EAAWH,SACvBI,EAAoBD,EAAUE,KAAK,KAEnCC,EAAM,IAAIC,YADKH,wBACW,YACxBJ,EAAOQ,MAAMF,IAAQ,IAAIG,OAKnBC,CAAWX,EAAMC,SAOxB,CACLW,MALAV,EADEC,EAAQ,GACEA,EAAQ,GAAMJ,EAAkB,GAAqB,GAAdI,EAAQ,IAEhDA,EAAQ,GAAM,EAAIJ,GAAmB,EAAII,KAGpC,GAChBA,MAAAA,GCEJ,SAASU,EAAcZ,EAAQa,EAAcpB,SAEzCS,MAAOY,EACPH,KAAMI,EAFFC,gBAGJA,GAjBJ,SAA+BhB,SAEvBM,EAAM,IAAIC,OADA,6BACgB,KAC1BL,GAASF,EAAOQ,MAAMF,IAAQ,IAAIG,aAGjC,CACLP,MAAAA,EACAS,KAJWT,EAAQP,EAKnBqB,gBAJsBhB,EAAOiB,QAAQX,EAAK,KAaxCY,CAAsBlB,GACpBmB,EA1BR,SAAoBnB,SAEZM,EAAM,IAAIC,OADA,OACgB,YACxBP,EAAOQ,MAAMF,IAAQ,IAAIG,OAuBfW,CAAWJ,SAEtB,CACLF,eAAAA,EACAC,kBAAAA,EACAM,SAJeF,EAAYN,EAK3BM,UAAAA,GCjCJ,SAASG,EAAaX,EAAMY,UAC1BA,OAAgC,IAAbA,EAA6BA,EAAW,KACvDZ,EAAO,GACW,OAAbY,EAAoB,QAAU,qBACjCZ,GAAQ,IAAOA,EAAO,IACN,OAAbY,EAAoB,KAAO,WAEhB,OAAbA,KAAuBC,KAAKC,KAAKd,UAAea,KAAKC,KAAKd,oBCPnE,SACEX,EACA0B,EACA5B,EACA6B,EACAxB,EACAoB,SAEQZ,KAAMiB,EAAW1B,MAAOQ,GAAeb,EAAcC,EAAiBK,EAAWH,GACnF6B,ECTR,SAAmB7B,SAEXM,EAAM,IAAIC,OADA,wDACgB,aACzBP,EAAOiB,QAAQX,EAAK,IDMJwB,CETzB,SAAyB9B,UAChBA,EAAOiB,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IFQjBc,CAAgB/B,KAC3Cc,eACJA,EADIC,kBAEJA,EAFIM,SAGJA,EAHIF,UAIJA,GACEP,EAAciB,EAAgBH,SAC3B,CACLM,kBAAmBV,EAAaM,EAAYb,EAAmBQ,GAC/DU,SAAUL,EAAYP,EACtBa,WAAYf,EACZE,SAAAA,EACAc,YAAazB,EACbkB,UAAAA,EACAQ,4BAA6BtB,EAC7BC,kBAAAA"}